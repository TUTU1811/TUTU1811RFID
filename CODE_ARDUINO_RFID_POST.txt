//#include <deprecated.h>
#include <SPI.h>
#include <MFRC522.h>
#include <MFRC522Extended.h>
//#include <aREST.h>
#include <WiFi.h>



#define RST_PIN         22          // Configurable, see typical pin layout above
#define SS_PIN          5         // Configurable, see typical pin layout above
#define ON_Board_LED    25

const char* host = "192.168.1.11";  //127.0.0.1

// Thông tin wifi
const char* ssid = "CATTT";
const char* password = "cat134679";

WiFiServer server(80);
MFRC522 mfrc522(SS_PIN, RST_PIN);  // Create MFRC522 instance
int readsuccess = 0;  //state RFID
byte readcard[4];
char new_str[32] = "";
String new_StrUID;

void setup() {
  Serial.begin(115200); //--> Initialize serial communications with the PC
  SPI.begin();      //--> Init SPI bus
  mfrc522.PCD_Init(); //--> Init MFRC522 card

  delay(500);

  WiFi.begin(ssid, password); //--> Connect to your WiFi router
  Serial.println("Connecting...");

  pinMode(ON_Board_LED, OUTPUT);

  //----------------------------------------Wait for connection
  Serial.println("Connecting");
  while (WiFi.status() != WL_CONNECTED) {
    Serial.print(".");
    //----------------------------------------Make the On Board Flashing LED on the process of connecting to the wifi router.
    digitalWrite(ON_Board_LED, LOW);
    delay(250);
    digitalWrite(ON_Board_LED, HIGH);
    delay(250);
  }
  digitalWrite(ON_Board_LED, HIGH); //--> Turn off the On Board LED when it is connected to the wifi router.
  //----------------------------------------If successfully connected to the wifi router, the IP Address that will be visited is displayed in the serial monitor
  Serial.println("");
  Serial.print("Successfully connected to : ");
  Serial.println(ssid);
  Serial.print("IP address: ");
  Serial.println(WiFi.localIP());
  digitalWrite(ON_Board_LED, LOW);
  Serial.println("Please tag a card or keychain to see the UID !");
  Serial.println("");
}

void loop() {
  readsuccess = getid();
  if (readsuccess) {
    digitalWrite(ON_Board_LED, HIGH);
    delay(1000);
    digitalWrite(ON_Board_LED, LOW);
    delay(1000);
    char str = '111';
    String UIDresultSend = String(str);
    digitalWrite(ON_Board_LED, LOW);
    String new_UIDresultSend, postData;
    new_UIDresultSend = new_StrUID;
    if (new_UIDresultSend != UIDresultSend) {
      UIDresultSend = new_UIDresultSend;
      // Đặt trạng thái mới
      Serial.println(UIDresultSend);
      Serial.print("Connecting to ");
      Serial.println(host);

      // Sử dụng WiFiClient để tạo kết nối TCP
      WiFiClient client = server.available();
      const int httpPort = 8080;
      if (!client.connect(host, httpPort)) {
        Serial.println("connection failed");
        return;
      }

      if (client.connect(host, httpPort)) {
        Serial.println("Connecting");
      }

      Serial.println("check");
      // Gửi yêu cầu tới server
      client.print(String("POST/rfidArduino?state=") + String(UIDresultSend) + " HTTP/1.1\r\n" +
                   "Host: " + host + "\r\n" +
                   "Connection: close\r\n\r\n");
      delay(10);
      Serial.println("3h34 sáng");
     if(!client.available()) {
        //Serial.println(" :> ");
      }
      while (client.available()) {
        Serial.println("connected !");
        String line = client.readStringUntil('\r');
        Serial.print(line);
      }
    }
  }
}
int getid() {
  if (!mfrc522.PICC_IsNewCardPresent()) {
    return 0;
  }
  if (!mfrc522.PICC_ReadCardSerial()) {
    return 0;
  }

  Serial.print("THE UID OF THE SCANNED CARD IS : ");
  for (int i = 0; i < 4; i++) {
    readcard[i] = mfrc522.uid.uidByte[i]; //storing the UID of the tag in readcard
    array_to_string(readcard, 4, new_str);
    new_StrUID = new_str;
  }
  mfrc522.PICC_HaltA();
  return 1;
}

void array_to_string(byte array[], unsigned int len, char buffer[]) {
  for (unsigned int i = 0; i < len; i++)
  {
    byte nib1 = (array[i] >> 4) & 0x0F;
    byte nib2 = (array[i] >> 0) & 0x0F;
    buffer[i * 2 + 0] = nib1  < 0xA ? '0' + nib1  : 'A' + nib1  - 0xA;
    buffer[i * 2 + 1] = nib2  < 0xA ? '0' + nib2  : 'A' + nib2  - 0xA;
  }
  buffer[len * 2] = '\0';
}